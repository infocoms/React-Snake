{"ast":null,"code":"import _objectSpread from \"/home/becode/Desktop/snake-game/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/becode/Desktop/snake-game/my-app/src/App.js\";\nimport React, { Component } from \"react\";\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\nimport Wall from \"./Wall\";\nimport Boost from \"./Boost\";\nlet high = 0;\nlet status = \"SNAKE THE GAME\";\nlet level = 0;\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst initialState = {\n  wall1: getRandomCoordinates(),\n  wall2: getRandomCoordinates(),\n  wall3: getRandomCoordinates(),\n  wall4: getRandomCoordinates(),\n  wall5: getRandomCoordinates(),\n  wall6: getRandomCoordinates(),\n  wall7: getRandomCoordinates(),\n  score: 0,\n  boost: getRandomCoordinates(),\n  food: getRandomCoordinates(),\n  speed: 100,\n  direction: \"RIGHT\",\n  snakeBlocks: [[50, 50], [52, 50], [54, 50]]\n};\n\nclass App extends Component {\n  constructor(props) {\n    super();\n\n    this.onKeyDown = e => {\n      e = e || window.event;\n\n      switch (e.keyCode) {\n        case 38:\n          this.setState({\n            direction: \"UP\"\n          });\n          break;\n\n        case 40:\n          this.setState({\n            direction: \"DOWN\"\n          });\n          break;\n\n        case 37:\n          this.setState({\n            direction: \"LEFT\"\n          });\n          break;\n\n        case 39:\n          this.setState({\n            direction: \"RIGHT\"\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.moveSnake = () => {\n      let block = [...this.state.snakeBlocks];\n      let head = block[block.length - 1];\n\n      switch (this.state.direction) {\n        case \"RIGHT\":\n          head = [head[0] + 2, head[1]];\n          break;\n\n        case \"LEFT\":\n          head = [head[0] - 2, head[1]];\n          break;\n\n        case \"DOWN\":\n          head = [head[0], head[1] + 2];\n          break;\n\n        case \"UP\":\n          head = [head[0], head[1] - 2];\n          break;\n\n        default:\n          break;\n      }\n\n      block.push(head);\n      block.shift();\n      this.setState({\n        snakeBlocks: block\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  speed() {\n    clearInterval(this.interval);\n    this.interval = setInterval(this.moveSnake, this.state.speed);\n  }\n\n  componentDidMount() {\n    this.speed();\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.increaseScore();\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n    this.checkIfHit();\n    this.speed();\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeBlocks];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(block => {\n      if (head[0] === block[0] && head[1] === block[1]) {\n        this.onGameOver();\n      }\n    });\n  }\n\n  checkIfHit() {\n    let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n    let wall1 = this.state.wall1;\n    let wall2 = this.state.wall2;\n    let wall3 = this.state.wall3;\n    let wall4 = this.state.wall4;\n\n    if (head[0] === wall1[0] && head[1] === wall1[1]) {\n      this.onGameOver();\n    }\n\n    if (head[0] === wall2[0] && head[1] === wall2[1]) {\n      this.onGameOver();\n    }\n\n    if (head[0] === wall3[0] && head[1] === wall3[1]) {\n      this.onGameOver();\n    }\n\n    if (head[0] === wall4[0] && head[1] === wall4[1]) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n    let food = this.state.food;\n    let boost = this.state.boost;\n\n    if (head[0] === food[0] && head[1] === food[1]) {\n      let newState = _objectSpread({}, this.state);\n\n      newState.wall1 = getRandomCoordinates();\n      newState.food = getRandomCoordinates();\n      newState.snakeBlocks = this.enlargeSnake();\n      newState.speed = this.increaseSpeed();\n      newState.score = this.increaseScore();\n      this.setState(newState);\n      this.speed();\n      this.increaseLevel();\n    }\n\n    if (head[0] === boost[0] && head[1] === boost[1]) {\n      let newCoor = _objectSpread({}, this.state);\n\n      newCoor.boost = getRandomCoordinates();\n      newCoor.speed = this.boostUp();\n      this.setState(newCoor);\n      this.speed();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeBlocks];\n    newSnake.unshift([]);\n    return newSnake;\n  }\n\n  increaseLevel() {\n    if (this.state.score === 9 || this.state.score === 19 || this.state.score === 29 || this.state.score === 39 || this.state.score === 49 || this.state.score === 59) {\n      level = level + 1;\n      status = \". . lvl up! . .\";\n    } else {}\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 25) {\n      status = \"+ 1\";\n      setTimeout(() => {\n        status = \"\";\n      }, 2000);\n      return this.state.speed - 5;\n    } else {\n      return this.state.speed + 50;\n    }\n  }\n\n  boostUp() {\n    status = \"Faaaaaaaacccckkkkkkkk\";\n    setTimeout(() => {\n      status = \"\";\n    }, 2000);\n    return this.state.speed = 25;\n  }\n\n  increaseScore() {\n    return this.state.score + 1;\n  }\n\n  onGameOver() {\n    //alert(`Game Over. Snake length is ${this.state.snakeBlocks.length}`);\n    if (high < this.state.score) {\n      high = this.state.score;\n    }\n\n    level = 0;\n    status = \"Game Over!\";\n    setTimeout(() => {\n      status = \"Lets try that again?\";\n    }, 2000);\n    setTimeout(() => {\n      status = \"\";\n    }, 3000);\n    this.setState(initialState);\n  }\n\n  render() {\n    return React.createElement(\"fragment\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"Score: \", React.createElement(\"b\", {\n      className: \"UI\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, this.state.score), \"level: \", React.createElement(\"b\", {\n      className: \"UI\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, level), \"Length: \", React.createElement(\"b\", {\n      className: \"UI\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, this.state.snakeBlocks.length), \"High Score: \", React.createElement(\"b\", {\n      className: \"UI\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, high))), React.createElement(\"div\", {\n      className: \"game-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(Snake, {\n      snakeBlocks: this.state.snakeBlocks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(Food, {\n      block: this.state.food,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }), React.createElement(Boost, {\n      block: this.state.boost,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), React.createElement(Wall, {\n      block: this.state.wall1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), React.createElement(Wall, {\n      block: this.state.wall2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), React.createElement(Wall, {\n      block: this.state.wall3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), React.createElement(Wall, {\n      block: this.state.wall4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }), React.createElement(Wall, {\n      block: this.state.wall5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }), React.createElement(Wall, {\n      block: this.state.wall6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }), React.createElement(Wall, {\n      block: this.state.wall7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      className: \"Info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, status)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/becode/Desktop/snake-game/my-app/src/App.js"],"names":["React","Component","Snake","Food","Wall","Boost","high","status","level","getRandomCoordinates","min","max","x","Math","floor","random","y","initialState","wall1","wall2","wall3","wall4","wall5","wall6","wall7","score","boost","food","speed","direction","snakeBlocks","App","constructor","props","onKeyDown","e","window","event","keyCode","setState","moveSnake","block","state","head","length","push","shift","clearInterval","interval","setInterval","componentDidMount","document","onkeydown","componentDidUpdate","increaseScore","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","checkIfHit","onGameOver","snake","pop","forEach","newState","enlargeSnake","increaseSpeed","increaseLevel","newCoor","boostUp","newSnake","unshift","setTimeout","render"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\nimport Wall from \"./Wall\";\nimport Boost from \"./Boost\";\n\nlet high = 0;\nlet status = \"SNAKE THE GAME\";\nlet level = 0;\n\n\nconst getRandomCoordinates = () => {\n    let min = 1;\n    let max = 98;\n    let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n    let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n    return [x, y];\n};\n\nconst initialState = {\n    wall1: getRandomCoordinates(),\n    wall2: getRandomCoordinates(),\n    wall3: getRandomCoordinates(),\n    wall4: getRandomCoordinates(),\n    wall5: getRandomCoordinates(),\n    wall6: getRandomCoordinates(),\n    wall7: getRandomCoordinates(),\n    score: 0,\n    boost: getRandomCoordinates(),\n    food: getRandomCoordinates(),\n    speed: 100,\n    direction: \"RIGHT\",\n    snakeBlocks: [[50, 50], [52, 50], [54, 50]]\n};\n\nclass App extends Component {\n    constructor(props) {\n        super();\n        this.state = initialState;\n    }\n\n    speed() {\n        clearInterval(this.interval);\n        this.interval = setInterval(this.moveSnake, this.state.speed);\n    }\n\n    componentDidMount() {\n        this.speed();\n        document.onkeydown = this.onKeyDown;\n    }\n\n    componentDidUpdate() {\n        this.increaseScore();\n        this.checkIfOutOfBorders();\n        this.checkIfCollapsed();\n        this.checkIfEat();\n        this.checkIfHit();\n        this.speed();\n    }\n\n    onKeyDown = e => {\n        e = e || window.event;\n        switch (e.keyCode) {\n            case 38:\n                this.setState({direction: \"UP\"});\n                break;\n            case 40:\n                this.setState({direction: \"DOWN\"});\n                break;\n            case 37:\n                this.setState({direction: \"LEFT\"});\n                break;\n            case 39:\n                this.setState({direction: \"RIGHT\"});\n                break;\n            default:\n                break;\n        }\n    };\n    moveSnake = () => {\n        let block = [...this.state.snakeBlocks];\n        let head = block[block.length - 1];\n\n        switch (this.state.direction) {\n            case \"RIGHT\":\n                head = [head[0] + 2, head[1]];\n                break;\n            case \"LEFT\":\n                head = [head[0] - 2, head[1]];\n                break;\n            case \"DOWN\":\n                head = [head[0], head[1] + 2];\n                break;\n            case \"UP\":\n                head = [head[0], head[1] - 2];\n                break;\n            default:\n                break;\n        }\n        block.push(head);\n        block.shift();\n        this.setState({\n            snakeBlocks: block\n        });\n    };\n\n    checkIfOutOfBorders() {\n        let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n        if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n            this.onGameOver();\n        }\n    }\n\n    checkIfCollapsed() {\n        let snake = [...this.state.snakeBlocks];\n        let head = snake[snake.length - 1];\n        snake.pop();\n        snake.forEach(block => {\n            if (head[0] === block[0] && head[1] === block[1]) {\n                this.onGameOver();\n            }\n        });\n    }\n\n    checkIfHit(){\n        let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n        let wall1 = this.state.wall1;\n        let wall2 = this.state.wall2;\n        let wall3 = this.state.wall3;\n        let wall4 = this.state.wall4;\n\n        if (head[0] === wall1[0] && head[1] === wall1[1]) {\n            this.onGameOver();\n        }\n\n        if (head[0] === wall2[0] && head[1] === wall2[1]){\n            this.onGameOver();\n        }\n\n        if (head[0] === wall3[0] && head[1] === wall3[1]){\n            this.onGameOver();\n        }\n\n        if (head[0] === wall4[0] && head[1] === wall4[1]){\n            this.onGameOver();\n        }\n\n    }\n\n    checkIfEat() {\n        let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n        let food = this.state.food;\n        let boost = this.state.boost;\n        if (head[0] === food[0] && head[1] === food[1] ) {\n            let newState = {...this.state};\n            newState.wall1 = getRandomCoordinates();\n            newState.food = getRandomCoordinates();\n            newState.snakeBlocks = this.enlargeSnake();\n            newState.speed = this.increaseSpeed();\n            newState.score = this.increaseScore();\n            this.setState(newState);\n            this.speed();\n            this.increaseLevel();\n        }\n        if (head[0] === boost[0] && head[1] === boost[1] ) {\n            let newCoor = {...this.state};\n            newCoor.boost = getRandomCoordinates();\n            newCoor.speed = this.boostUp();\n            this.setState(newCoor);\n            this.speed();\n        }\n    }\n\n\n    enlargeSnake() {\n        let newSnake = [...this.state.snakeBlocks];\n\n        newSnake.unshift([]);\n        return newSnake;\n\n    }\n\n   increaseLevel() {\n        if (this.state.score === 9 || this.state.score === 19 || this.state.score === 29 || this.state.score === 39 || this.state.score === 49 || this.state.score === 59) {\n            level = level + 1;\n            status = \". . lvl up! . .\";\n        }\n        else {\n        }\n    }\n\n    increaseSpeed() {\n        if (this.state.speed > 25) {\n            status = \"+ 1\";\n            setTimeout(()=>{status = \"\"; },2000);\n            return this.state.speed - 5;\n        } else {\n\n            return this.state.speed + 50;\n\n        }\n    }\n\n    boostUp() {\n            status = \"Faaaaaaaacccckkkkkkkk\";\n            setTimeout(()=>{status = \"\"; },2000);\n            return this.state.speed = 25;\n\n    }\n\n\n    increaseScore() {\n        return this.state.score + 1;\n    }\n\n\n\n    onGameOver() {\n        //alert(`Game Over. Snake length is ${this.state.snakeBlocks.length}`);\n        if (high < this.state.score){\n            high = this.state.score;\n        }\n        level = 0;\n        status = \"Game Over!\";\n        setTimeout(()=>{status = \"Lets try that again?\"; },2000);\n        setTimeout(()=>{status = \"\"; },3000);\n        this.setState(initialState);\n    }\n\n\n    render() {\n        return (\n            <fragment>\n                <div className=\"title\">\n                    <p>Score: <b className=\"UI\">{this.state.score}</b>\n                        level: <b className=\"UI\">{level}</b>\n                        Length: <b className=\"UI\">{this.state.snakeBlocks.length}</b>\n                        High Score: <b className=\"UI\">{high}</b>\n                    </p>\n\n                </div>\n                <div className=\"game-area\">\n                    <Snake snakeBlocks={this.state.snakeBlocks}/>\n                    <Food block={this.state.food}/>\n                    <Boost block={this.state.boost}/>\n                    <Wall block={this.state.wall1}/>\n                    <Wall block={this.state.wall2}/>\n                    <Wall block={this.state.wall3}/>\n                    <Wall block={this.state.wall4}/>\n                    <Wall block={this.state.wall5}/>\n                    <Wall block={this.state.wall6}/>\n                    <Wall block={this.state.wall7}/>\n                    <h2 className=\"Info\">{status}</h2>\n                </div>\n            </fragment>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}