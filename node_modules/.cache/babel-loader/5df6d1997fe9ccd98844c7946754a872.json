{"ast":null,"code":"import _objectSpread from \"/home/becode/Desktop/snake-game/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/becode/Desktop/snake-game/my-app/src/App.js\";\nimport React, { Component } from \"react\";\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\nimport Wall from \"./Wall\";\nimport Boost from \"./Boost\";\nlet high = 0;\nlet status = \"Let's Play\";\nlet level = 0;\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst initialState = {\n  wall1: getRandomCoordinates(),\n  wall2: getRandomCoordinates(),\n  wall3: getRandomCoordinates(),\n  wall4: getRandomCoordinates(),\n  wall5: getRandomCoordinates(),\n  wall6: getRandomCoordinates(),\n  wall7: getRandomCoordinates(),\n  score: 0,\n  boost2: getRandomCoordinates(),\n  boost: getRandomCoordinates(),\n  food: getRandomCoordinates(),\n  speed: 100,\n  direction: \"RIGHT\",\n  snakeBlocks: [[2, 2], [4, 2], [6, 2]]\n};\n\nclass App extends Component {\n  constructor(props) {\n    super();\n\n    this.onKeyDown = e => {\n      e = e || window.event;\n\n      switch (e.keyCode) {\n        case 38:\n          this.setState({\n            direction: \"UP\"\n          });\n          break;\n\n        case 40:\n          this.setState({\n            direction: \"DOWN\"\n          });\n          break;\n\n        case 37:\n          this.setState({\n            direction: \"LEFT\"\n          });\n          break;\n\n        case 39:\n          this.setState({\n            direction: \"RIGHT\"\n          });\n          break;\n\n        case 80:\n          this.setState({\n            speed: 300\n          });\n          break;\n\n        default:\n          break;\n      }\n\n      if (e.charCode === 80 || e.keyCode()) {}\n    };\n\n    this.moveSnake = () => {\n      let block = [...this.state.snakeBlocks];\n      let head = block[block.length - 1];\n      let pause = this.state.speed;\n\n      switch (this.state.direction) {\n        case \"RIGHT\":\n          head = [head[0] + 2, head[1]];\n          break;\n\n        case \"LEFT\":\n          head = [head[0] - 2, head[1]];\n          break;\n\n        case \"DOWN\":\n          head = [head[0], head[1] + 2];\n          break;\n\n        case \"UP\":\n          head = [head[0], head[1] - 2];\n          break;\n\n        default:\n          break;\n      }\n\n      block.push(head);\n      block.shift();\n      this.setState({\n        snakeBlocks: block\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  speed() {\n    clearInterval(this.interval);\n    this.interval = setInterval(this.moveSnake, this.state.speed);\n  }\n\n  componentDidMount() {\n    this.speed();\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.increaseScore();\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n    this.checkIfHit();\n    this.speed();\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeBlocks];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(block => {\n      if (head[0] === block[0] && head[1] === block[1]) {\n        this.onGameOver();\n      }\n    });\n  }\n\n  checkIfHit() {\n    let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n    let wall1 = this.state.wall1;\n    let wall2 = this.state.wall2;\n    let wall3 = this.state.wall3;\n    let wall4 = this.state.wall4;\n    let wall5 = this.state.wall5;\n    let wall6 = this.state.wall6;\n    let wall7 = this.state.wall7;\n\n    if (head[0] === wall1[0] && head[1] === wall1[1]) {\n      this.wallHit();\n    }\n\n    if (head[0] === wall2[0] && head[1] === wall2[1]) {\n      this.wallHit();\n    }\n\n    if (head[0] === wall3[0] && head[1] === wall3[1]) {\n      this.wallHit();\n    }\n\n    if (head[0] === wall4[0] && head[1] === wall4[1]) {\n      this.wallHit();\n    }\n\n    if (head[0] === wall5[0] && head[1] === wall5[1]) {\n      this.wallHit();\n    }\n\n    if (head[0] === wall6[0] && head[1] === wall6[1]) {\n      this.wallHit();\n    }\n\n    if (head[0] === wall7[0] && head[1] === wall7[1]) {\n      this.wallHit();\n    }\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n    let food = this.state.food;\n    let boost = this.state.boost;\n    let boost2 = this.state.boost2;\n\n    if (head[0] === food[0] && head[1] === food[1]) {\n      let newState = _objectSpread({}, this.state);\n\n      newState.food = getRandomCoordinates();\n      newState.snakeBlocks = this.enlargeSnake();\n      newState.speed = this.increaseSpeed();\n      newState.score = this.increaseScore();\n      this.setState(newState);\n      this.speed();\n      this.increaseLevel();\n    }\n\n    if (head[0] === boost[0] && head[1] === boost[1]) {\n      this.boostHit();\n    }\n\n    if (head[0] === boost2[0] && head[1] === boost2[1]) {\n      this.boostHit();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeBlocks];\n    newSnake.unshift([]);\n    return newSnake;\n  }\n\n  increaseLevel() {\n    if (this.state.score === 9 || this.state.score === 19 || this.state.score === 29 || this.state.score === 39 || this.state.score === 49 || this.state.score === 59) {\n      level = level + 1;\n      status = \". . lvl up! . .\";\n    } else {}\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 20) {\n      status = \"+ 1\";\n      setTimeout(() => {\n        status = \"\";\n      }, 2000);\n      return this.state.speed - 5;\n    } else {\n      return this.state.speed + 30;\n    }\n  }\n\n  boostHit() {\n    let newCoor = _objectSpread({}, this.state);\n\n    newCoor.boost = getRandomCoordinates();\n    newCoor.boost2 = getRandomCoordinates();\n    newCoor.speed = this.boostUp();\n    this.setState(newCoor);\n    this.speed();\n  }\n\n  wallHit() {\n    this.onGameOver();\n\n    let newCoorWall = _objectSpread({}, this.state);\n\n    newCoorWall.wall1 = getRandomCoordinates();\n    newCoorWall.wall2 = getRandomCoordinates();\n    newCoorWall.wall3 = getRandomCoordinates();\n    newCoorWall.wall4 = getRandomCoordinates();\n    newCoorWall.wall5 = getRandomCoordinates();\n    newCoorWall.wall6 = getRandomCoordinates();\n    newCoorWall.wall7 = getRandomCoordinates();\n    this.setState(newCoorWall);\n    this.setState(initialState); //game over function goes here\n  }\n\n  boostUp() {\n    status = \"Yi HA!!\";\n    setTimeout(() => {\n      status = \"\";\n    }, 2000);\n    return this.state.speed = 30;\n  }\n\n  increaseScore() {\n    return this.state.score + 1;\n  }\n\n  onGameOver() {\n    //alert(`Game Over. Snake length is ${this.state.snakeBlocks.length}`);\n    if (high < this.state.score) {\n      high = this.state.score;\n    }\n\n    level = 0;\n    status = \"Game Over!\";\n    setTimeout(() => {\n      status = \"Lets try that again?\";\n    }, 2000);\n    setTimeout(() => {\n      status = \"\";\n    }, 3000);\n    this.setState(initialState);\n  }\n\n  render() {\n    return React.createElement(\"fragment\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"GameTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, \"NEON SNAKE \\u2122\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, \"Score: \", React.createElement(\"b\", {\n      className: \"UI\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, this.state.score), \"level: \", React.createElement(\"b\", {\n      className: \"UI\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, level), \"Length: \", React.createElement(\"b\", {\n      className: \"UI\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, this.state.snakeBlocks.length), \"High Score: \", React.createElement(\"b\", {\n      className: \"UI\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, high))), React.createElement(\"div\", {\n      className: \"game-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(Snake, {\n      snakeBlocks: this.state.snakeBlocks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }), React.createElement(Food, {\n      block: this.state.food,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }), React.createElement(Boost, {\n      block: this.state.boost,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), React.createElement(Boost, {\n      block: this.state.boost2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(Wall, {\n      block: this.state.wall1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }), React.createElement(Wall, {\n      block: this.state.wall2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }), React.createElement(Wall, {\n      block: this.state.wall3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), React.createElement(Wall, {\n      block: this.state.wall4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }), React.createElement(Wall, {\n      block: this.state.wall5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }), React.createElement(Wall, {\n      block: this.state.wall6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }), React.createElement(Wall, {\n      block: this.state.wall7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      className: \"Info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, status)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/becode/Desktop/snake-game/my-app/src/App.js"],"names":["React","Component","Snake","Food","Wall","Boost","high","status","level","getRandomCoordinates","min","max","x","Math","floor","random","y","initialState","wall1","wall2","wall3","wall4","wall5","wall6","wall7","score","boost2","boost","food","speed","direction","snakeBlocks","App","constructor","props","onKeyDown","e","window","event","keyCode","setState","charCode","moveSnake","block","state","head","length","pause","push","shift","clearInterval","interval","setInterval","componentDidMount","document","onkeydown","componentDidUpdate","increaseScore","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","checkIfHit","onGameOver","snake","pop","forEach","wallHit","newState","enlargeSnake","increaseSpeed","increaseLevel","boostHit","newSnake","unshift","setTimeout","newCoor","boostUp","newCoorWall","render"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\nimport Wall from \"./Wall\";\nimport Boost from \"./Boost\";\n\nlet high = 0;\nlet status = \"Let's Play\";\nlet level = 0;\n\n\nconst getRandomCoordinates = () => {\n    let min = 1;\n    let max = 98;\n    let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n    let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n    return [x, y];\n};\n\nconst initialState = {\n    wall1: getRandomCoordinates(),\n    wall2: getRandomCoordinates(),\n    wall3: getRandomCoordinates(),\n    wall4: getRandomCoordinates(),\n    wall5: getRandomCoordinates(),\n    wall6: getRandomCoordinates(),\n    wall7: getRandomCoordinates(),\n    score: 0,\n    boost2: getRandomCoordinates(),\n    boost: getRandomCoordinates(),\n    food: getRandomCoordinates(),\n    speed: 100,\n    direction: \"RIGHT\",\n    snakeBlocks: [[2, 2], [4, 2], [6, 2]]\n};\n\nclass App extends Component {\n    constructor(props) {\n        super();\n        this.state = initialState;\n    }\n\n    speed() {\n        clearInterval(this.interval);\n        this.interval = setInterval(this.moveSnake, this.state.speed);\n    }\n\n    componentDidMount() {\n        this.speed();\n        document.onkeydown = this.onKeyDown;\n    }\n\n    componentDidUpdate() {\n        this.increaseScore();\n        this.checkIfOutOfBorders();\n        this.checkIfCollapsed();\n        this.checkIfEat();\n        this.checkIfHit();\n        this.speed();\n    }\n\n\n\n    onKeyDown = e => {\n        e = e || window.event;\n        switch (e.keyCode) {\n            case 38:\n                this.setState({direction: \"UP\"});\n                break;\n            case 40:\n                this.setState({direction: \"DOWN\"});\n                break;\n            case 37:\n                this.setState({direction: \"LEFT\"});\n                break;\n            case 39:\n                this.setState({direction: \"RIGHT\"});\n                break;\n            case 80:\n                this.setState({speed: 300});\n\n                break;\n            default:\n                break;\n        }\n        if (e.charCode===80 || e.keyCode() ){\n\n        }\n    };\n\n\n    moveSnake = () => {\n        let block = [...this.state.snakeBlocks];\n        let head = block[block.length - 1];\n        let pause = this.state.speed;\n\n        switch (this.state.direction) {\n            case \"RIGHT\":\n                head = [head[0] + 2, head[1]];\n                break;\n            case \"LEFT\":\n                head = [head[0] - 2, head[1]];\n                break;\n            case \"DOWN\":\n                head = [head[0], head[1] + 2];\n                break;\n            case \"UP\":\n                head = [head[0], head[1] - 2];\n                break;\n            default:\n                break;\n        }\n        block.push(head);\n        block.shift();\n        this.setState({\n            snakeBlocks: block\n        });\n    };\n\n    checkIfOutOfBorders() {\n        let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n        if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n            this.onGameOver();\n        }\n    }\n\n    checkIfCollapsed() {\n        let snake = [...this.state.snakeBlocks];\n        let head = snake[snake.length - 1];\n        snake.pop();\n        snake.forEach(block => {\n            if (head[0] === block[0] && head[1] === block[1]) {\n                this.onGameOver();\n            }\n        });\n    }\n\n    checkIfHit(){\n        let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n        let wall1 = this.state.wall1;\n        let wall2 = this.state.wall2;\n        let wall3 = this.state.wall3;\n        let wall4 = this.state.wall4;\n        let wall5 = this.state.wall5;\n        let wall6 = this.state.wall6;\n        let wall7 = this.state.wall7;\n\n        if (head[0] === wall1[0] && head[1] === wall1[1]) {\n            this.wallHit();\n        }\n\n        if (head[0] === wall2[0] && head[1] === wall2[1]){\n            this.wallHit();\n        }\n\n        if (head[0] === wall3[0] && head[1] === wall3[1]){\n            this.wallHit();\n        }\n        if (head[0] === wall4[0] && head[1] === wall4[1]){\n            this.wallHit();\n        }\n        if (head[0] === wall5[0] && head[1] === wall5[1]){\n            this.wallHit();\n        }\n        if (head[0] === wall6[0] && head[1] === wall6[1]){\n            this.wallHit();\n        }\n        if (head[0] === wall7[0] && head[1] === wall7[1]){\n            this.wallHit();\n        }\n\n    }\n\n    checkIfEat() {\n        let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n        let food = this.state.food;\n        let boost = this.state.boost;\n        let boost2 =  this.state.boost2;\n        if (head[0] === food[0] && head[1] === food[1] ) {\n            let newState = {...this.state};\n            newState.food = getRandomCoordinates();\n            newState.snakeBlocks = this.enlargeSnake();\n            newState.speed = this.increaseSpeed();\n            newState.score = this.increaseScore();\n            this.setState(newState);\n            this.speed();\n            this.increaseLevel();\n        }\n        if (head[0] === boost[0] && head[1] === boost[1] ) {\n           this.boostHit();\n        }\n        if (head[0] === boost2[0] && head[1] === boost2[1] ) {\n            this.boostHit();\n        }\n    }\n\n\n    enlargeSnake() {\n        let newSnake = [...this.state.snakeBlocks];\n\n        newSnake.unshift([]);\n        return newSnake;\n\n    }\n\n   increaseLevel() {\n        if (this.state.score === 9 || this.state.score === 19 || this.state.score === 29 || this.state.score === 39 || this.state.score === 49 || this.state.score === 59) {\n            level = level + 1;\n            status = \". . lvl up! . .\";\n        }\n        else {\n        }\n    }\n\n    increaseSpeed() {\n        if (this.state.speed > 20) {\n            status = \"+ 1\";\n            setTimeout(()=>{status = \"\"; },2000);\n            return this.state.speed - 5;\n        } else {\n\n            return this.state.speed + 30;\n\n        }\n    }\n\n    boostHit(){\n        let newCoor = {...this.state};\n        newCoor.boost = getRandomCoordinates();\n        newCoor.boost2 = getRandomCoordinates();\n        newCoor.speed = this.boostUp();\n        this.setState(newCoor);\n        this.speed();\n    }\n\n    wallHit(){\n        this.onGameOver();\n        let newCoorWall = {...this.state};\n        newCoorWall.wall1 = getRandomCoordinates();\n        newCoorWall.wall2 = getRandomCoordinates();\n        newCoorWall.wall3 = getRandomCoordinates();\n        newCoorWall.wall4 = getRandomCoordinates();\n        newCoorWall.wall5 = getRandomCoordinates();\n        newCoorWall.wall6 = getRandomCoordinates();\n        newCoorWall.wall7 = getRandomCoordinates();\n        this.setState(newCoorWall);\n        this.setState(initialState);\n        //game over function goes here\n    }\n\n    boostUp() {\n            status = \"Yi HA!!\";\n            setTimeout(()=>{status = \"\"; },2000);\n            return this.state.speed = 30;\n    }\n\n\n    increaseScore() {\n        return this.state.score + 1;\n    }\n\n\n\n    onGameOver() {\n        //alert(`Game Over. Snake length is ${this.state.snakeBlocks.length}`);\n        if (high < this.state.score){\n            high = this.state.score;\n        }\n        level = 0;\n        status = \"Game Over!\";\n        setTimeout(()=>{status = \"Lets try that again?\"; },2000);\n        setTimeout(()=>{status = \"\"; },3000);\n        this.setState(initialState);\n    }\n\n\n    render() {\n        return (\n            <fragment>\n                <div className=\"title\">\n                    <h1 className=\"GameTitle\">NEON SNAKE ™</h1>\n                    <p>Score: <b className=\"UI\">{this.state.score}</b>\n                        level: <b className=\"UI\">{level}</b>\n                        Length: <b className=\"UI\">{this.state.snakeBlocks.length}</b>\n                        High Score: <b className=\"UI\">{high}</b>\n                    </p>\n\n                </div>\n                <div className=\"game-area\">\n                    <Snake snakeBlocks={this.state.snakeBlocks}/>\n                    <Food block={this.state.food}/>\n                    <Boost block={this.state.boost}/>\n                    <Boost block={this.state.boost2}/>\n                    <Wall block={this.state.wall1}/>\n                    <Wall block={this.state.wall2}/>\n                    <Wall block={this.state.wall3}/>\n                    <Wall block={this.state.wall4}/>\n                    <Wall block={this.state.wall5}/>\n                    <Wall block={this.state.wall6}/>\n                    <Wall block={this.state.wall7}/>\n                    <h2 className=\"Info\">{status}</h2>\n                </div>\n            </fragment>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}