{"ast":null,"code":"import _objectSpread from \"/home/becode/Desktop/snake-game/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/becode/Desktop/snake-game/my-app/src/App.js\";\nimport React, { Component } from \"react\";\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\nimport Score from \"./Score\";\nlet score = 0;\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 200,\n  direction: \"RIGHT\",\n  snakeBlocks: [[0, 0], [2, 0], [4, 0]]\n};\n\nclass App extends Component {\n  constructor(props) {\n    super();\n\n    this.onKeyDown = e => {\n      e = e || window.event;\n\n      switch (e.keyCode) {\n        case 38:\n          this.setState({\n            direction: \"UP\"\n          });\n          break;\n\n        case 40:\n          this.setState({\n            direction: \"DOWN\"\n          });\n          break;\n\n        case 37:\n          this.setState({\n            direction: \"LEFT\"\n          });\n          break;\n\n        case 39:\n          this.setState({\n            direction: \"RIGHT\"\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.moveSnake = () => {\n      let block = [...this.state.snakeBlocks];\n      let head = block[block.length - 1];\n\n      switch (this.state.direction) {\n        case \"RIGHT\":\n          head = [head[0] + 2, head[1]];\n          break;\n\n        case \"LEFT\":\n          head = [head[0] - 2, head[1]];\n          break;\n\n        case \"DOWN\":\n          head = [head[0], head[1] + 2];\n          break;\n\n        case \"UP\":\n          head = [head[0], head[1] - 2];\n          break;\n\n        default:\n          break;\n      }\n\n      block.push(head);\n      block.shift();\n      this.setState({\n        snakeBlocks: block\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  speed() {\n    clearInterval(this.interval);\n    this.interval = setInterval(this.moveSnake, this.state.speed);\n  }\n\n  componentDidMount() {\n    this.speed();\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n    this.speed();\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeBlocks];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(block => {\n      if (head[0] === block[0] && head[1] === block[1]) {\n        this.onGameOver();\n      }\n    });\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n    let food = this.state.food;\n\n    if (head[0] === food[0] && head[1] === food[1]) {\n      let newState = _objectSpread({}, this.state);\n\n      newState.food = getRandomCoordinates();\n      newState.snakeBlocks = this.enlargeSnake();\n      newState.speed = this.increaseSpeed();\n      this.setState(newState);\n      this.speed();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeBlocks];\n    newSnake.unshift([]);\n    return newSnake;\n  }\n\n  increaseSpeed() {\n    if (this.state.speed >= 10) {\n      return this.state.speed - 5;\n    }\n  }\n\n  onGameOver() {\n    alert(`Game Over. Snake length is ${this.state.snakeBlocks.length}`);\n    this.setState(initialState);\n    score = this.state.snakeBlocks.length;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"game-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"SCORE:\", this.state.snakeBlocks.length), React.createElement(Snake, {\n      snakeBlocks: this.state.snakeBlocks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(Food, {\n      block: this.state.food,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/becode/Desktop/snake-game/my-app/src/App.js"],"names":["React","Component","Snake","Food","Score","score","getRandomCoordinates","min","max","x","Math","floor","random","y","initialState","food","speed","direction","snakeBlocks","App","constructor","props","onKeyDown","e","window","event","keyCode","setState","moveSnake","block","state","head","length","push","shift","clearInterval","interval","setInterval","componentDidMount","document","onkeydown","componentDidUpdate","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","forEach","newState","enlargeSnake","increaseSpeed","newSnake","unshift","alert","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\nimport Score from \"./Score\";\n\nlet score = 0;\n\nconst getRandomCoordinates = () => {\n    let min = 1;\n    let max = 98;\n    let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n    let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n    return [x, y];\n};\n\nconst initialState = {\n    food: getRandomCoordinates(),\n    speed: 200,\n    direction: \"RIGHT\",\n    snakeBlocks: [[0, 0], [2, 0], [4, 0]]\n};\nclass App extends Component {\n    constructor(props) {\n        super();\n        this.state = initialState;\n    }\n\n    speed() {\n        clearInterval(this.interval);\n        this.interval = setInterval(this.moveSnake, this.state.speed);\n    }\n    componentDidMount() {\n        this.speed();\n        document.onkeydown = this.onKeyDown;\n    }\n    componentDidUpdate() {\n        this.checkIfOutOfBorders();\n        this.checkIfCollapsed();\n        this.checkIfEat();\n        this.speed();\n    }\n\n    onKeyDown = e => {\n        e = e || window.event;\n        switch (e.keyCode) {\n            case 38:\n                this.setState({ direction: \"UP\" });\n                break;\n            case 40:\n                this.setState({ direction: \"DOWN\" });\n                break;\n            case 37:\n                this.setState({ direction: \"LEFT\" });\n                break;\n            case 39:\n                this.setState({ direction: \"RIGHT\" });\n                break;\n            default:\n                break;\n        }\n    };\n    moveSnake = () => {\n        let block = [...this.state.snakeBlocks];\n        let head = block[block.length - 1];\n\n        switch (this.state.direction) {\n            case \"RIGHT\":\n                head = [head[0] + 2, head[1]];\n                break;\n            case \"LEFT\":\n                head = [head[0] - 2, head[1]];\n                break;\n            case \"DOWN\":\n                head = [head[0], head[1] + 2];\n                break;\n            case \"UP\":\n                head = [head[0], head[1] - 2];\n                break;\n            default:\n                break;\n        }\n        block.push(head);\n        block.shift();\n        this.setState({\n            snakeBlocks: block\n        });\n    };\n    checkIfOutOfBorders() {\n        let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n        if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n            this.onGameOver();\n        }\n    }\n    checkIfCollapsed() {\n        let snake = [...this.state.snakeBlocks];\n        let head = snake[snake.length - 1];\n        snake.pop();\n        snake.forEach(block => {\n            if (head[0] === block[0] && head[1] === block[1]) {\n                this.onGameOver();\n            }\n        });\n    }\n    checkIfEat() {\n        let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n        let food = this.state.food;\n        if (head[0] === food[0] && head[1] === food[1]) {\n            let newState = { ...this.state };\n            newState.food = getRandomCoordinates();\n            newState.snakeBlocks = this.enlargeSnake();\n            newState.speed = this.increaseSpeed();\n            this.setState(newState);\n            this.speed();\n        }\n    }\n    enlargeSnake() {\n        let newSnake = [...this.state.snakeBlocks];\n        newSnake.unshift([]);\n        return newSnake;\n    }\n    increaseSpeed() {\n        if (this.state.speed >= 10) {\n            return this.state.speed - 5;\n        }\n    }\n\n    onGameOver() {\n        alert(`Game Over. Snake length is ${this.state.snakeBlocks.length}`);\n        this.setState(initialState);\n        score = this.state.snakeBlocks.length;\n\n    }\n\n    render() {\n        return (\n            <div className=\"game-area\">\n                <h3>SCORE:{this.state.snakeBlocks.length}</h3>\n                <Snake snakeBlocks={this.state.snakeBlocks} />\n                <Food block={this.state.food} />\n            </div>\n        );\n    }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}